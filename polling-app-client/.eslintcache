[{"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\index.js":"1","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\reportWebVitals.js":"2","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\app\\App.js":"3","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\AppHeader.js":"4","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\LoadingIndicator.js":"5","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\NotFound.js":"6","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\PrivateRoute.js":"7","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\constants\\index.js":"8","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\poll\\NewPoll.js":"9","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\poll\\PollList.js":"10","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\user\\login\\Login.js":"11","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\util\\APIUtils.js":"12","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\user\\profile\\Profile.js":"13","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\ServerError.js":"14","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\util\\Colors.js":"15","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\util\\Helpers.js":"16","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\user\\signup\\Signup.js":"17","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\poll\\Poll.js":"18","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\registerServiceWorker.js":"19"},{"size":1339,"mtime":1610370548253,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"23"},{"size":3582,"mtime":1610371884005,"results":"24","hashOfConfig":"21"},{"size":3294,"mtime":1614074858458,"results":"25","hashOfConfig":"21"},{"size":330,"mtime":1610362201678,"results":"26","hashOfConfig":"21"},{"size":659,"mtime":1610362230942,"results":"27","hashOfConfig":"21"},{"size":536,"mtime":1610362273105,"results":"28","hashOfConfig":"21"},{"size":569,"mtime":1610371014150,"results":"29","hashOfConfig":"21"},{"size":13628,"mtime":1614610919980,"results":"30","hashOfConfig":"21"},{"size":12907,"mtime":1614610246828,"results":"31","hashOfConfig":"21"},{"size":3377,"mtime":1610375842285,"results":"32","hashOfConfig":"21"},{"size":5298,"mtime":1614527059858,"results":"33","hashOfConfig":"21"},{"size":6792,"mtime":1614610106116,"results":"34","hashOfConfig":"21"},{"size":732,"mtime":1610362692706,"results":"35","hashOfConfig":"21"},{"size":576,"mtime":1610362721546,"results":"36","hashOfConfig":"21"},{"size":837,"mtime":1610362745944,"results":"37","hashOfConfig":"21"},{"size":12862,"mtime":1610375961057,"results":"38","hashOfConfig":"21"},{"size":16830,"mtime":1616677721526,"results":"39","hashOfConfig":"21"},{"size":4715,"mtime":1610370510636,"results":"40","hashOfConfig":"21"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"zqv2d6",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1vp1mlg",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"43"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\index.js",[],["86","87"],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\reportWebVitals.js",[],["88","89"],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\app\\App.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\AppHeader.js",["90"],"import React, { Component } from 'react';\r\nimport {\r\n    Link,\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport './AppHeader.css';\r\nimport pollIcon from '../poll.svg';\r\nimport { Layout, Menu, Dropdown } from 'antd';\r\nimport {\r\n  DownOutlined,UserOutlined,HomeOutlined\r\n} from '@ant-design/icons';\r\nconst Header = Layout.Header;\r\n    \r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);   \r\n        this.handleMenuClick = this.handleMenuClick.bind(this);   \r\n    }\r\n\r\n    handleMenuClick({ key }) {\r\n      if(key === \"logout\") {\r\n        this.props.onLogout();\r\n      }\r\n    }\r\n\r\n    render() {\r\n        let menuItems;\r\n        if(this.props.currentUser) {\r\n          menuItems = [\r\n            <Menu.Item key=\"/\">\r\n              <Link to=\"/\">\r\n              <HomeOutlined className=\"nav-icon\"/>\r\n              </Link>\r\n            </Menu.Item>,\r\n            <Menu.Item key=\"/poll/new\">\r\n            <Link to=\"/poll/new\">\r\n              <img src={pollIcon} alt=\"poll\" className=\"poll-icon\" />\r\n            </Link>\r\n          </Menu.Item>,\r\n          <Menu.Item key=\"/profile\" className=\"profile-menu\">\r\n                <ProfileDropdownMenu \r\n                  currentUser={this.props.currentUser} \r\n                  handleMenuClick={this.handleMenuClick}/>\r\n            </Menu.Item>\r\n          ]; \r\n        } else {\r\n          menuItems = [\r\n            <Menu.Item key=\"/login\">\r\n              <Link to=\"/login\">Login</Link>\r\n            </Menu.Item>,\r\n            <Menu.Item key=\"/signup\">\r\n              <Link to=\"/signup\">Signup</Link>\r\n            </Menu.Item>                  \r\n          ];\r\n        }\r\n\r\n        return (\r\n            <Header className=\"app-header\">\r\n            <div className=\"container\">\r\n              <div className=\"app-title\" >\r\n                <Link to=\"/\">Polling App</Link>\r\n              </div>\r\n              <Menu\r\n                className=\"app-menu\"\r\n                mode=\"horizontal\"\r\n                selectedKeys={[this.props.location.pathname]}\r\n                style={{ lineHeight: '64px' }} >\r\n                  {menuItems}\r\n              </Menu>\r\n            </div>\r\n          </Header>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ProfileDropdownMenu(props) {\r\n  const dropdownMenu = (\r\n    <Menu onClick={props.handleMenuClick} className=\"profile-dropdown-menu\">\r\n      <Menu.Item key=\"user-info\" className=\"dropdown-item\" disabled>\r\n        <div className=\"user-full-name-info\">\r\n          {props.currentUser.name}\r\n        </div>\r\n        <div className=\"username-info\">\r\n          @{props.currentUser.username}\r\n        </div>\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key=\"profile\" className=\"dropdown-item\">\r\n        <Link to={`/users/${props.currentUser.username}`}>Profile</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"logout\" className=\"dropdown-item\">\r\n        Logout\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <Dropdown \r\n      overlay={dropdownMenu} \r\n      trigger={['click']}\r\n      getPopupContainer = { () => document.getElementsByClassName('profile-menu')[0]}>\r\n      <a className=\"ant-dropdown-link\">\r\n      <UserOutlined className=\"nav-icon\" style={{marginRight: 0}}/><DownOutlined />\r\n      </a>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\n\r\nexport default withRouter(AppHeader);","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\LoadingIndicator.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\NotFound.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\PrivateRoute.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\constants\\index.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\poll\\NewPoll.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\poll\\PollList.js",["91"],"import React, { Component } from 'react';\r\nimport { getAllPolls, getUserCreatedPolls, getUserVotedPolls } from '../util/APIUtils';\r\nimport Poll from './Poll';\r\nimport { castVote,deleteVote,addChoice,deleteChoice } from '../util/APIUtils';\r\nimport LoadingIndicator  from '../common/LoadingIndicator';\r\nimport { Button, Icon, notification,Row,Modal } from 'antd';\r\nimport { POLL_LIST_SIZE } from '../constants';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './PollList.css';\r\nimport {\r\n    ExclamationCircleOutlined\r\n} from '@ant-design/icons';\r\nclass PollList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            polls: [],\r\n            page: 0,\r\n            size: 10,\r\n            totalElements: 0,\r\n            totalPages: 0,\r\n            last: true,\r\n            currentVotes: [],\r\n            isLoading: false,\r\n            choiceCanAdd: true,\r\n            visible: false,\r\n            currentPollIndex: 0,\r\n            currentValue:''\r\n        };\r\n        this.loadPollList = this.loadPollList.bind(this);\r\n        this.handleLoadMore = this.handleLoadMore.bind(this);\r\n    }\r\n\r\n    addAChoice (event, pollIndex){\r\n        event.preventDefault();\r\n        if(!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to vote.\",          \r\n            });\r\n            return;\r\n        }\r\n        \r\n        const addDataChoice = {\r\n            pollId: this.state.polls[pollIndex].id,\r\n            text: event.currentTarget.value\r\n        }\r\n        addChoice(addDataChoice)\r\n        .then(response => {\r\n            const polls = this.state.polls.slice();\r\n            polls[pollIndex] = response;\r\n            this.setState({\r\n                polls: polls\r\n            });       \r\n        }).catch(error => {\r\n            if(error.status === 401) {\r\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');    \r\n            } else {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });                \r\n            }\r\n        });\r\n        this.setState({\r\n            choiceCanAdd:true\r\n        })\r\n    }\r\n    loadPollList(page = 0, size = POLL_LIST_SIZE) {\r\n        let promise;\r\n        if(this.props.username) {\r\n            if(this.props.type === 'USER_CREATED_POLLS') {\r\n                promise = getUserCreatedPolls(this.props.username, page, size);\r\n            } else if (this.props.type === 'USER_VOTED_POLLS') {\r\n                promise = getUserVotedPolls(this.props.username, page, size);                               \r\n            }\r\n        } else {\r\n            promise = getAllPolls(page, size);\r\n        }\r\n\r\n        if(!promise) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n\r\n        promise            \r\n        .then(response => {\r\n            const polls = this.state.polls.slice();\r\n            const currentVotes = this.state.currentVotes.slice();\r\n\r\n            this.setState({\r\n                polls: polls.concat(response.content),\r\n                page: response.page,\r\n                size: response.size,\r\n                totalElements: response.totalElements,\r\n                totalPages: response.totalPages,\r\n                last: response.last,\r\n                currentVotes: currentVotes.concat(Array(response.content.length).fill(null)),\r\n                isLoading: false\r\n            })\r\n        }).catch(error => {\r\n            this.setState({\r\n                isLoading: false\r\n            })\r\n        });  \r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadPollList();\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        if(this.props.isAuthenticated !== nextProps.isAuthenticated) {\r\n            // Reset State\r\n            this.setState({\r\n                polls: [],\r\n                page: 0,\r\n                size: 10,\r\n                totalElements: 0,\r\n                totalPages: 0,\r\n                last: true,\r\n                currentVotes: [],\r\n                isLoading: false\r\n            });    \r\n            this.loadPollList();\r\n        }\r\n    }\r\n\r\n    handleLoadMore() {\r\n        this.loadPollList(this.state.page + 1);\r\n    }\r\n\r\n    handleVoteChange(event, pollIndex) {\r\n        const currentVotes = this.state.currentVotes.slice();\r\n        currentVotes[pollIndex] = event.target.value;\r\n\r\n        this.setState({\r\n            currentVotes: currentVotes\r\n        });\r\n    }\r\n    // handleAddChoice(event, pollIndex) {\r\n    //     if(this.state.choices.text==\"\"&&this.state.canAddVote){\r\n    //         <Input\r\n    //             placeholder={'Choice ' + (props.choiceNumber + 1)}\r\n    //             size=\"large\"\r\n    //             value={props.choice.text}\r\n    //             className={props.choiceNumber > 1 ? \"optional-choice\" : null}\r\n    //             onChange={(event) => props.handleChoiceChange(event, props.choiceNumber)} />\r\n\r\n    //         {\r\n    //             props.choiceNumber > 1 ? (\r\n    //                 <CloseOutlined className=\"dynamic-delete-button\" disabled={props.choiceNumber <= 1} onClick={() => props.removeChoice(props.choiceNumber)}/>\r\n    //                 // <Icon\r\n    //                 //     className=\"dynamic-delete-button\"\r\n    //                 //     type=\"close\"\r\n    //                 //     disabled={props.choiceNumber <= 1}\r\n    //                 //     onClick={() => props.removeChoice(props.choiceNumber)}\r\n    //                 // />\r\n    //                 ) : null\r\n    //         }\r\n    //     }\r\n    // }\r\n    handleDeleteChoiceSubmit=(event)=> {\r\n        event.preventDefault();\r\n        if(!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to vote.\",          \r\n            });\r\n            return;\r\n        }\r\n\r\n        const poll = this.state.polls[this.state.currentPollIndex];\r\n\r\n        const voteData = {\r\n            pollId: poll.id,\r\n            choiceId: this.state.currentValue\r\n        };\r\n\r\n        deleteChoice(voteData)\r\n        .then(response => {\r\n            const polls = this.state.polls.slice();\r\n            polls[this.state.currentPollIndex] = response;\r\n            this.setState({\r\n                polls: polls\r\n            });        \r\n        }).catch(error => {\r\n            if(error.status === 401) {\r\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');    \r\n            } else {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });                \r\n            }\r\n        });\r\n        this.setState({\r\n            polls: this.state.polls,\r\n            visible:false\r\n        });   \r\n    }\r\n    handleCancel=()=>{\r\n        this.setState({\r\n            visible:false,\r\n            currentPollIndex:0,\r\n            currentValue:''\r\n        })\r\n    }\r\n    showModal(event,pollIndex){\r\n        this.setState({\r\n            visible:true,\r\n            currentPollIndex:pollIndex,\r\n            currentValue:event.currentTarget.value\r\n        })\r\n    }\r\n    handleDeleteVoteSubmit(event, pollIndex) {\r\n        event.preventDefault();\r\n        if(!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to vote.\",          \r\n            });\r\n            return;\r\n        }\r\n\r\n        const poll = this.state.polls[pollIndex];\r\n        const selectedChoice = event.currentTarget.value;\r\n\r\n        const voteData = {\r\n            pollId: poll.id,\r\n            choiceId: selectedChoice\r\n        };\r\n\r\n        deleteVote(voteData)\r\n        .then(response => {\r\n            const polls = this.state.polls.slice();\r\n            polls[pollIndex] = response;\r\n            this.setState({\r\n                polls: polls\r\n            });        \r\n        }).catch(error => {\r\n            if(error.status === 401) {\r\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');    \r\n            } else {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });                \r\n            }\r\n        });\r\n        this.setState({\r\n            polls: this.state.polls\r\n        });   \r\n    }\r\n\r\n    handleVoteSubmit(event, pollIndex) {\r\n        event.preventDefault();\r\n        if(!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to vote.\",          \r\n            });\r\n            return;\r\n        }\r\n\r\n        const poll = this.state.polls[pollIndex];\r\n        const selectedChoice = this.state.currentVotes[pollIndex];\r\n\r\n        const voteData = {\r\n            pollId: poll.id,\r\n            choiceId: selectedChoice\r\n        };\r\n\r\n        castVote(voteData)\r\n        .then(response => {\r\n            const polls = this.state.polls.slice();\r\n            polls[pollIndex] = response;\r\n            this.setState({\r\n                polls: polls\r\n            });        \r\n        }).catch(error => {\r\n            if(error.status === 401) {\r\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');    \r\n            } else {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });                \r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const pollViews = [];\r\n        this.state.polls.forEach((poll, pollIndex) => {\r\n            pollViews.push(<Poll \r\n                isAuthenticated = {this.props.isAuthenticated}\r\n                history = {this.props.history}\r\n                key={poll.id} \r\n                poll={poll}\r\n                currentUser={this.props.currentUser}\r\n                currentVote={this.state.currentVotes[pollIndex]}\r\n                addAChoice = {(event=> this.addAChoice(event,pollIndex))} \r\n                choiceCanAdd = {this.state.choiceCanAdd}\r\n                handleDeleteChoiceSubmit = {(event) => this.showModal(event, pollIndex)}\r\n                handleDeleteVoteSubmit={(event) => this.handleDeleteVoteSubmit(event, pollIndex)}\r\n                handleVoteChange={(event) => this.handleVoteChange(event, pollIndex)}\r\n                handleVoteSubmit={(event) => this.handleVoteSubmit(event, pollIndex)} />)            \r\n        });\r\n\r\n        return (\r\n           \r\n            <div className=\"polls-container\">\r\n                <Modal\r\n                title=\"Confirm your action\"\r\n                visible={this.state.visible}\r\n                onOk={this.handleDeleteChoiceSubmit}\r\n                onCancel={this.handleCancel}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={this.handleCancel}>\r\n                        Return\r\n            </Button>,\r\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleDeleteChoiceSubmit}>\r\n                        Submit\r\n            </Button>,\r\n                ]}\r\n            ><p>Are you want delete this choice?</p>\r\n            </Modal>\r\n                 <Row gutter={[16, 24]}>\r\n                {pollViews}\r\n                {\r\n                    !this.state.isLoading && this.state.polls.length === 0 ? (\r\n                        <div className=\"no-polls-found\">\r\n                            <span>No Polls Found.</span>\r\n                        </div>    \r\n                    ): null\r\n                }  \r\n                {\r\n                    !this.state.isLoading && !this.state.last ? (\r\n                        <div className=\"load-more-polls\"> \r\n                            <Button type=\"dashed\" onClick={this.handleLoadMore} disabled={this.state.isLoading}>\r\n                                <Icon type=\"plus\" /> Load more\r\n                            </Button>\r\n                        </div>): null\r\n                }              \r\n                {\r\n                    this.state.isLoading ? \r\n                    <LoadingIndicator />: null                     \r\n                }\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(PollList);","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\user\\login\\Login.js",["92"],"import React, { Component } from 'react';\r\nimport { login } from '../../util/APIUtils';\r\nimport './Login.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { ACCESS_TOKEN } from '../../constants';\r\n\r\nimport { Form, Input, Button, Icon, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass Login extends Component {\r\n    render() {\r\n        \r\n        const AntWrappedLoginForm = Form.create()(LoginForm)\r\n        return (\r\n            <div className=\"login-container\">\r\n                <h1 className=\"page-title\">Login</h1>\r\n                <div className=\"login-content\">\r\n                    <AntWrappedLoginForm onLogin={this.props.onLogin} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass LoginForm extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit = values => {\r\n                const loginRequest = Object.assign({}, values);\r\n                login(loginRequest)\r\n                .then(response => {\r\n                    localStorage.setItem(ACCESS_TOKEN, response.accessToken);\r\n                    this.props.onLogin();\r\n                }).catch(error => {\r\n                    if(error.status === 401) {\r\n                        notification.error({\r\n                            message: 'Polling App',\r\n                            description: 'Your Username or Password is incorrect. Please try again!'\r\n                        });                    \r\n                    } else {\r\n                        notification.error({\r\n                            message: 'Polling App',\r\n                            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                        });                                            \r\n                    }\r\n                });\r\n            }\r\n\r\n    render() {\r\n        //const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div className=\"login-container\">\r\n                <h1 className=\"page-title\">Login</h1>\r\n                <div className=\"login-content\">\r\n            <Form onFinish={this.handleSubmit} className=\"login-form\">\r\n                <FormItem name=\"usernameOrEmail\" rules =  {[{ required: true, message: 'Please input your username or email!' }]}>\r\n                    <Input \r\n                        prefix={<Icon type=\"user\" />}\r\n                        size=\"large\"\r\n                        name=\"usernameOrEmail\" \r\n                        placeholder=\"Username or Email\" />    \r\n                </FormItem>\r\n                <FormItem name = \"password\" rules={[{ required: true, message: 'Please input your Password!' }]}>\r\n                    <Input \r\n                        prefix={<Icon type=\"lock\" />}\r\n                        size=\"large\"\r\n                        name=\"password\" \r\n                        type=\"password\" \r\n                        placeholder=\"Password\"  />                   \r\n                </FormItem>\r\n                <FormItem>\r\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" className=\"login-form-button\">Login</Button>\r\n                    Or <Link to=\"/signup\">register now!</Link>\r\n                </FormItem>\r\n            </Form>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default LoginForm;","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\util\\APIUtils.js",["93"],"import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from '../constants';\r\nimport axios from 'axios';\r\nconst request = (options) => {\r\n    const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n    })\r\n    \r\n    if(localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = {headers: headers};\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    return fetch(options.url, options)\r\n    .then(response => \r\n        response.json().then(json => {\r\n            if(!response.ok) {\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    );\r\n};\r\nconst request2 = (options) => {\r\n    const headers = new Headers({\r\n        'Accept': '*/*',\r\n    })\r\n    \r\n    if(localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = {headers: headers};\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    return fetch(options.url, options)\r\n    .then(response => \r\n        response.json().then(json => {\r\n            if(!response.ok) {\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    );\r\n};\r\nexport function getAllPolls(page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function createPoll(pollData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls\",\r\n        method: 'POST',\r\n        body: JSON.stringify(pollData)         \r\n    });\r\n}\r\n\r\nexport function castVote(voteData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\r\n        method: 'POST',\r\n        body: JSON.stringify(voteData)\r\n    });\r\n}\r\n\r\nexport function deleteVote(deleteData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + deleteData.pollId + \"/deletevotes\",\r\n        method: 'POST',\r\n        body: JSON.stringify(deleteData)\r\n    });\r\n}\r\nexport function deleteChoice(deleteData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + deleteData.pollId + \"/deletechoice\",\r\n        method: 'POST',\r\n        body: JSON.stringify(deleteData)\r\n    });\r\n}\r\nexport function addChoice(addData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + addData.pollId + \"/addchoice\",\r\n        method: 'POST',\r\n        body: JSON.stringify(addData)\r\n    });\r\n}\r\nexport function login(loginRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/auth/signin\",\r\n        method: 'POST',\r\n        body: JSON.stringify(loginRequest)\r\n    });\r\n}\r\n\r\nexport function signup(signupRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/auth/signup\",\r\n        method: 'POST',\r\n        body: JSON.stringify(signupRequest)\r\n    });\r\n}\r\nexport function changeAvatar(imageData) {\r\n// var singleFileUploadError = document.querySelector('#singleFileUploadError');\r\n// var singleFileUploadSuccess = document.querySelector('#singleFileUploadSuccess');\r\n//     var xhr = new XMLHttpRequest();\r\n//     xhr.open(\"POST\", API_BASE_URL + \"/file/useravatar\");\r\n\r\n//     xhr.onload = function() {\r\n//         console.log(xhr.responseText);\r\n//         var response = JSON.parse(xhr.responseText);\r\n//         if(xhr.status == 200) {\r\n//             return response.fileDownloadUri;\r\n//         } else {\r\n//             return \"fail\";\r\n//         }\r\n//     }\r\n//     xhr.send(imageData);\r\n    //return axios.post(API_BASE_URL + \"/useravatar\", imageData);\r\n    return request2({\r\n        url: API_BASE_URL + \"/file/useravatar\",\r\n        method: 'POST',\r\n        body: imageData\r\n    });\r\n}\r\nexport function getImage(filename) {\r\n    return request({\r\n        url: API_BASE_URL + \"/file/getImage/\" + filename,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function checkUsernameAvailability(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function checkEmailAvailability(email) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\n\r\nexport function getCurrentUser() {\r\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\r\n        return Promise.reject(\"No access token set.\");\r\n    }\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/user/me\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserProfile(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/users/\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserCreatedPolls(username, page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/users/\" + username + \"/polls?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserVotedPolls(username, page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/users/\" + username + \"/votes?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\user\\profile\\Profile.js",["94","95","96"],"import React, { Component, useState } from 'react';\r\nimport PollList from '../../poll/PollList';\r\nimport { getUserProfile, changeAvatar } from '../../util/APIUtils';\r\nimport { Avatar, Tabs, notification, Button } from 'antd';\r\nimport { getAvatarColor } from '../../util/Colors';\r\nimport { formatDate } from '../../util/Helpers';\r\nimport LoadingIndicator from '../../common/LoadingIndicator';\r\nimport './Profile.css';\r\nimport NotFound from '../../common/NotFound';\r\nimport ServerError from '../../common/ServerError';\r\nimport { Upload } from 'antd';\r\nimport ImgCrop from 'antd-img-crop';\r\nimport 'antd/es/modal/style';\r\nimport 'antd/es/slider/style';\r\nconst TabPane = Tabs.TabPane;\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            urlImage: \"\",\r\n            isLoading: false,\r\n            uploading: false,\r\n            fileResponse: [],\r\n            fileList: []\r\n        }\r\n        this.loadUserProfile = this.loadUserProfile.bind(this);\r\n    }\r\n    beforeUpload = async file => {\r\n        this.setState(state => ({\r\n            fileList: [...state.fileList, file],\r\n        }));\r\n        const formData = new FormData();\r\n        formData.append(\"file\", this.state.fileList[0]);\r\n        console.log(this.state.fileList);\r\n        changeAvatar(formData)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                alert(\"File uploaded successfully.\")\r\n            });\r\n        this.setState({\r\n            uploading: true,\r\n        });\r\n        window.location = window.location.href;\r\n        return false;\r\n    };\r\n\r\n    loadUserProfile(username) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n\r\n        getUserProfile(username)\r\n            .then(response => {\r\n                this.setState({\r\n                    user: response,\r\n                    isLoading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 404) {\r\n                    this.setState({\r\n                        notFound: true,\r\n                        isLoading: false\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        serverError: true,\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const username = this.props.match.params.username;\r\n        this.loadUserProfile(username);\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        if (this.props.match.params.username !== nextProps.match.params.username) {\r\n            this.loadUserProfile(nextProps.match.params.username);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return <LoadingIndicator />;\r\n        }\r\n\r\n        if (this.state.notFound) {\r\n            return <NotFound />;\r\n        }\r\n\r\n        if (this.state.serverError) {\r\n            return <ServerError />;\r\n        }\r\n\r\n        const tabBarStyle = {\r\n            textAlign: 'center'\r\n        };\r\n        return (\r\n            <div className=\"profile\">\r\n                {\r\n                    this.state.user ? (\r\n                        <div className=\"user-profile\">\r\n                            <div className=\"user-details\">\r\n                                <div className=\"user-avatar\">\r\n                                <ImgCrop rotate>\r\n                                    <Upload\r\n                                        // listType=\"picture-card\"\r\n                                        fileList={this.state.fileList}\r\n                                        beforeUpload={this.beforeUpload}\r\n                                    >\r\n                                        {this.state.user.photo==null?\r\n                                (<Avatar className=\"user-avatar-circle\"\r\n                                    style={{ backgroundColor: getAvatarColor(this.state.user.name) }} >\r\n                                    {this.state.user.name[0].toUpperCase()}\r\n                                </Avatar>):(\r\n                                <Avatar className=\"user-avatar-circle\" src={\"http://localhost:5000/api/file/getImage/\" + this.state.user.photo} />)}\r\n                                    {/* <Avatar className=\"user-avatar-circle\" src={\"http://localhost:5000/api/file/getImage/\" + this.state.user.photo} /> */}\r\n                                    {/* <Avatar className=\"user-avatar-circle\" style={{ backgroundColor: getAvatarColor(this.state.user.name)}}>\r\n                                        {this.state.user.name[0].toUpperCase()}\r\n                                    </Avatar> */}\r\n                                    </Upload>\r\n                                </ImgCrop>\r\n                                </div>\r\n                                {/* <div>\r\n                                </div> */}\r\n                                \r\n                                    \r\n\r\n\r\n                                <div className=\"user-summary\">\r\n                                    <div className=\"full-name\">{this.state.user.name}</div>\r\n                                    <div className=\"username\">@{this.state.user.username}</div>\r\n                                    <div className=\"user-joined\">\r\n                                        Joined {formatDate(this.state.user.joinedAt)}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"user-poll-details\">\r\n                                <Tabs defaultActiveKey=\"1\"\r\n                                    animated={false}\r\n                                    tabBarStyle={tabBarStyle}\r\n                                    size=\"large\"\r\n                                    className=\"profile-tabs\">\r\n                                    <TabPane tab={`${this.state.user.pollCount} Polls`} key=\"1\">\r\n                                        <PollList currentUser={this.props.currentUser} username={this.props.match.params.username} type=\"USER_CREATED_POLLS\" isAuthenticated={this.props.isAuthenticated}/>\r\n                                    </TabPane>\r\n                                    <TabPane tab={`${this.state.user.voteCount} Votes`} key=\"2\">\r\n                                        <PollList currentUser={this.props.currentUser} username={this.props.match.params.username} type=\"USER_VOTED_POLLS\" isAuthenticated={this.props.isAuthenticated}/>\r\n                                    </TabPane>\r\n                                </Tabs>\r\n                            </div>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\common\\ServerError.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\util\\Colors.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\util\\Helpers.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\user\\signup\\Signup.js",[],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\poll\\Poll.js",["97","98","99","100","101","102","103","104","105","106"],"C:\\Users\\ASUS\\Downloads\\demo\\polling-app-client\\src\\registerServiceWorker.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":102,"column":7,"nodeType":"115","endLine":102,"endColumn":40},{"ruleId":"116","severity":1,"message":"117","line":11,"column":5,"nodeType":"118","messageId":"119","endLine":11,"endColumn":30},{"ruleId":"116","severity":1,"message":"120","line":10,"column":7,"nodeType":"118","messageId":"119","endLine":10,"endColumn":12},{"ruleId":"116","severity":1,"message":"121","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":13},{"ruleId":"116","severity":1,"message":"122","line":1,"column":28,"nodeType":"118","messageId":"119","endLine":1,"endColumn":36},{"ruleId":"116","severity":1,"message":"123","line":4,"column":24,"nodeType":"118","messageId":"119","endLine":4,"endColumn":36},{"ruleId":"116","severity":1,"message":"124","line":4,"column":38,"nodeType":"118","messageId":"119","endLine":4,"endColumn":44},{"ruleId":"116","severity":1,"message":"125","line":4,"column":39,"nodeType":"118","messageId":"119","endLine":4,"endColumn":42},{"ruleId":"116","severity":1,"message":"126","line":4,"column":44,"nodeType":"118","messageId":"119","endLine":4,"endColumn":49},{"ruleId":"116","severity":1,"message":"123","line":4,"column":51,"nodeType":"118","messageId":"119","endLine":4,"endColumn":63},{"ruleId":"116","severity":1,"message":"127","line":4,"column":72,"nodeType":"118","messageId":"119","endLine":4,"endColumn":77},{"ruleId":"116","severity":1,"message":"128","line":5,"column":10,"nodeType":"118","messageId":"119","endLine":5,"endColumn":21},{"ruleId":"116","severity":1,"message":"129","line":6,"column":10,"nodeType":"118","messageId":"119","endLine":6,"endColumn":19},{"ruleId":"116","severity":1,"message":"117","line":11,"column":70,"nodeType":"118","messageId":"119","endLine":11,"endColumn":95},{"ruleId":"116","severity":1,"message":"130","line":108,"column":19,"nodeType":"118","messageId":"119","endLine":108,"endColumn":32},{"ruleId":"131","severity":1,"message":"132","line":185,"column":57,"nodeType":"133","messageId":"134","endLine":185,"endColumn":59},{"ruleId":"131","severity":1,"message":"132","line":185,"column":127,"nodeType":"133","messageId":"134","endLine":185,"endColumn":129},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],["135"],["136"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'ExclamationCircleOutlined' is defined but never used.","Identifier","unusedVar","'Login' is defined but never used.","'axios' is defined but never used.","'useState' is defined but never used.","'notification' is defined but never used.","'Button' is defined but never used.","'Row' is defined but never used.","'Badge' is defined but never used.","'Modal' is defined but never used.","'MAX_CHOICES' is defined but never used.","'addChoice' is defined but never used.","'winningChoice' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation"]